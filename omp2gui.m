% ######### OMP analysis main program version 2  ###################
%      
% omp2gui.m
%
% This is the GUI version of an easy-to-handle package for the use of 
% OMP analysis to resolve fractions of water masses involved in the
% mixing of water masses at a given point in the ocean. The original
% version was prepared by Johannes Karstensen. This version incorporates
% improvements by Matthias Tomczak.
%
% This program will run without any changes, using the default settings
% supplied for all necessary input, and produce output based on
% the data file testdata.mat supplied with this package. For details
% see the README.ps or README.html files.
%
% Some preparation work is necessary if you want to use the program with
% your own data and water type definitions. Again, details can be found
% in the README.ps or README.html files.
%
%
% Function calls used: qwt2.m qwt_tst.m nansum.m (Philip Morgan, CSIRO)
%  sw_ptmp sw_dens0.m (Philip Morgan, CSIRO) may be called for some data files
%  sw_dist.m (Philip Morgan, CSIRO) is called through the contour2 call
%---------------------------------------------
% This program is part of the OMP package from:
% GEOMAR
% Helmholtz Centre for Ocean Res. Kiel  FIAMS, Flinders University
% J. Karstensen                         Matthias Tomczak
% Duesternbrooker Weg 20				GPO Box 2100
% 24106 Kiel                            Adelaide, SA
% Germany                               Australia
%
% BUGS: jkarstensen@geomar.de
%   or  matthias.tomczak@flinders.edu.au
%--------------------------------------------

clear
global ftm ftz fts                     % controls font size for different screens
fontset;                               % list of font sizes to choose from
status1 = 'Status: waiting for input';
status2 = 'Status: reading data';
eex(1:11) = [0 0 0 0 0 0 0 0 0 0 0];   % index of available variables
esx(1:11) = [0 0 0 0 0 0 0 0 0 0 0];   % index of selected variables
                                        % 1: latitude
										% 2: longitude
										% 3: pressure
                                        % 4: salinity
										% 5: potential temperature
										% 6: oxygen
                                        % 7: phosphate
										% 8: nitrate
										% 9: silicate
                                        %10: potential vorticity
										%11: temperature

% NOTE: For historical reasons the two columns mass conservation and potential vorticity are
% swapped in the program so that mass conservation is always the last column, after potential vorticity.
% The arrangement of the water type matrix and the weight vector thus differs from the description
% in the user manual. This should not be of concern but has to be watched when changing the code.
		
lim = [0 0];						   % checks which data limits are set
OMP = 'cla';                           % classic or extended analysis
                        
h1 = ['                           OMP Analysis version  2.0'];
h2 = [''];
h3 = ['                              Johannes Karstensen'];
h4 = ['                                       and'];
h5 = ['                                Matthias Tomczak'];
h6 = [''];
h7 = ['  This is an updated version of a program package for the use'];
h8 = ['  of OMP analysis to resolve fractions of water masses involved'];
h9 = ['  in the mixing of water masses at a given point in the ocean.'];
ht1 = str2mat(h1,h2,h3,h4,h5,h6,h7,h8,h9);

h1 = [''];
h3 = ['  The original version was prepared by Johannes Karstensen.'];
h4 = ['  This version incorporates improvements by Matthias Tomczak.'];
h5 = [''];
h6 = ['                                    August 1999'];
ht2 = str2mat(h1,h2,h3,h4,h5,h6);

h1 = [''];
h2 = [''];
h3 = [''];
h4 = ['       OMP Analysis version 2.0 by Johannes Karstensen and Matthias Tomczak'];
ht3 = str2mat(h1,h2,h3,h4);


h1 = ['  Credits:'];
h2 = [''];
h3 = ['  Version 1 by Johannes Karstensen (Institut fuer Meereskunde an der Universitaet Hamburg, Germany), 1999'];
h4 = ['  email: jkarstensen@geomar.de'];
h5 = ['  Version 2.0 by Johannes Karstensen and Matthias Tomczak (FIAMS, Flinders University, Adelaide, Australia)'];
h6 = ['  email: jkarstensen@geomar.de  or  matthias.tomczak@flinders.edu.au'];
h7 = ['  Seawater routines from the Seawater toolbox of Phillip P. Morgan, CSIRO Marine Research'];
h8 = [''];
credit = str2mat(h1,h2,h3,h4,h5,h6,h7,h8);

dist = [0.:10.:400.];

mainfig = figure('Color',[0.2 0.6 0.8],'MenuBar','none', ...  	% main GUI window
	'Name','OMP Analysis version 2.0', ...
	'NumberTitle','off','Position',[10 20 950 620],'Resize','off');

b = uicontrol('Parent',mainfig, ...  							% Static title
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'ForegroundColor',[1 1 0], ...
	'Position',[0.1 0.9 0.8 0.05], ...
	'HorizontalAlignment','center', ...
	'String','OMP Analysis version 2.0 by Johannes Karstensen and Matthias Tomczak', ...
	'Style','text', ...
	'Tag','StaticText1','fontsize',ftz+2);

ex = uicontrol('Parent',mainfig,'Units','normalized', ...		% exit button
	'BackgroundColor',[0.9 0.9 0.2], ...
	'Callback',['clear all, close all, omp2gui'], ...
	'Position',[0.85 0.05 0.075 0.066], ...
	'String','restart', ...
	'Style','pushbutton','fontsize',ftz);
	
hlp = uicontrol('Parent',mainfig,'Units','normalized', ...		% help button
	'BackgroundColor',[0.9 0.9 0.2], ...
	'Callback','helpint', ...
	'Position',[0.75 0.05 0.066 0.066], ...
	'String','help', ...
	'Style','pushbutton','fontsize',ftz);
	
cr = uicontrol('Parent',mainfig,'Units','normalized', ...		% credits button
	'BackgroundColor',[1 0.4 0.2], ...
	'Callback',['crf = figure(''Color'',[0.5 0.6 0.8],''MenuBar'',''none'','...
		'''Name'',''OMP Analysis: Credits'',' ...
		'''Position'',[10 20 600 420],''NumberTitle'',''off'',''Resize'',''off'');' ...
		'displtxt(credit);', ...
		'pause(5),close(crf),' ...
		], ...
	'Position',[0.6 0.05 0.116 0.066], ...
	'String','credits', ...
	'Style','pushbutton','fontsize',ftz);

% status indicates current action, also problems (see help file)
status = uicontrol('Parent',mainfig,'Units','normalized', ...
	'BackgroundColor',[1 0.8 0.5], ...
	'Callback','omp2int', ...
	'HorizontalAlignment','Center', ...
	'Position',[0.01 0.057 0.3 0.05], ...
	'String',status1, ...
	'Style','text','fontsize',ftz);

h1 = ['Data sets for this program must contain the following information:'];
h2 = [''];
h3 = ['  latitude:  essential'];
h4 = ['  longitude: essential'];
h5 = ['  pressure:  essential'];
h6 = ['  salinity:  essential'];
ht1 = str2mat(h1,h2,h3,h4,h5,h6);

ax1 = axes('position',[0.455 0.17 0.6 0.71],'color',[0.85 0.95 0.95], ...
	'xcolor',[0.7 0.83 0.8],'ycolor',[0.7 0.83 0.8],'xtick',[],'ytick',[]);
hold on
for i = 1:6		%display the above text lines
	text(0.02,1-0.05*i,ht1(i,:),'color','k','fontname',eval(ftm),'fontsize',ftz);
end

ax2 = axes('position',[0.455 0.17 0.6 0.48],'color',[0.85 0.95 0.95], ...
	'xcolor',[0.7 0.83 0.8],'ycolor',[0.7 0.83 0.8],'xtick',[],'ytick',[]);
h1 = ['  temperature: essential unless potential temperature is supplied'];
h2 = ['  potential temperature: optional (will be calculated if not supplied)'];
h3 = ['  density: optional (will be calculated if not supplied)'];
h4 = ['  oxygen: optional'];
h5 = ['  phosphate: optional'];
h6 = ['  nitrate: optional'];
h7 = ['  silicate: optional'];
h8 = ['  potential vorticity: optional (will be calculated if necessary)'];
h9 = [''];
h10 = ['  NOTE: All data entry fields have to be activated before the run'];
h11 = ['  is started. A START button will appear when entry is complete.'];
ht2 = str2mat(h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11);
for i = 1:11		%display the above text lines
	text(0.02,1-0.08*i,ht2(i,:),'color','k','fontname',eval(ftm),'fontsize',ftz);
end

a(1,1:8) = [' basic  '];
a(2,1:8) = ['analysis'];

rb1 = uicontrol('Parent',mainfig, ...				% classical OMP button
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.01 0.82 0.2 0.06], ...
	'Value',1, ...
	'Callback',[...
	'OMP = ''cla'';,' ...
	'set(rb1,''Value'',1),' ...
	'set(rb2,''Value'',0),'], ...
	'Style','radiobutton', ...
	'String','basic OMP analysis','fontsize',ftz);
	
rb2 = uicontrol('Parent',mainfig, ...				% extended OMP button
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.23 0.82 0.22 0.06], ...
	'Value',0, ...
	'Callback',[...
	'OMP = ''ext'';,' ...
	'set(rb1,''Value'',0),' ...
	'set(rb2,''Value'',1),'], ...
	'Style','radiobutton', ...
	'String','extended OMP analysis','fontsize',ftz);
	
% whichfile and infile are the routines to read data.
% If a data file is correctly loaded, the routines make the radiobuttons for the
% existing variables visible. Initially all buttons for existing variables are
% switched on. Optional variables can be deselected. Potential vorticity can be
% activated by selecting it.
% Infile changes Type from Edit to Text when the selection of variables is complete
% (ie the Done button is pressed).

whichfile = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.01 0.75 0.15 0.05], ...
	'String','Data:', ...
	'Style','text','fontsize',ftz);
	
infile = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.6 0.8 0.9], ...
	'Callback',[ ...
	'clear lat long press temp sal ptemp oxy ph ni si pvort,' ...
	'dataset = get(infile,''String'');,' ...
	'set(status,''String'',status2);,' ...
	'eex(1:11) = [1 1 1 1 1 1 1 1 1 1 1];,' ...
	'eval([''load '' dataset]),' ...
	'axes(''position'',[0.455 0.17 0.6 0.71],''color'',[0.2 0.6 0.8],''xcolor'',' ...
	'[0.7 0.83 0.8],''ycolor'',[0.7 0.83 0.8],''xtick'',[],''ytick'',[]);,' ...
	'text(0.15,0.9,''Select your variables for analysis'',''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz);,' ...
	'pause(0.25);,' ...
	'set(db,''Visible'',''on'');,' ...
	'set(db,''Value'',1);,' ...
	'if exist(''temp'') == 0 eex(11)=0; end,' ...
	'if exist(''lat'') == 0 eex(1)=0; end,' ...
	'if exist(''long'') == 0 eex(2)=0; end,' ...
	'if exist(''press'') == 0 eex(3)=0; end,' ...
	'if exist(''sal'') == 0 set(db(4),''Value'',0); eex(4)=0; end,' ...
	'if exist(''ptemp'') == 0 set(db(5),''Value'',0); eex(5)=0; end,' ...
	'if exist(''oxy'') == 0 set(db(6),''Value'',0); eex(6)=0; end,' ...
	'if exist(''ph'') == 0 set(db(7),''Value'',0); eex(7)=0; end,' ...
	'if exist(''ni'') == 0 set(db(8),''Value'',0); eex(8)=0; end,' ...
	'if exist(''si'') == 0 set(db(9),''Value'',0); eex(9)=0; end,' ...
	'if exist(''pvort'') == 0 set(db(10),''Value'',0); eex(10)=0; end,' ...
	'set(status,''String'',status1);,' ...
	'set(done,''Visible'',''on''),' ...
	'if (eex(11)==0 & eex(5)==0) | sum(eex(1:4)~=[1 1 1 1])>0,' ...
		'set(status,''String'','' WARNING: essential parameter missing!'');,' ...
		'set(done,''Visible'',''off''),' ...
	'end,' ...
	'esx = eex;,' ...
	], ...
	'Position',[0.17 0.76 0.21 0.05], ...
	'String','testdata', ...
	'Style','edit','fontsize',ftz);

% whichwt and inwt are the routines to read the water type matrix. Initially all
% available water types are displayed. The final number of water types and the
% water types themselves are then selected using selwt. Selwtxt displays the
%text for the selection field.

whichwt = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Callback','omp2int', ...
	'Position',[0.01 0.7 0.15 0.05], ...
	'String','Water types:', ...
	'Style','text','fontsize',ftz);
	
inwt = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.6 0.8 0.9], ...
	'Callback',[ ...
	'newfile = get(inwt,''String'');,' ...
	'set(status,''String'',status2);,' ...
	'qwt_pos = [1 2];,' ...
	'[G0,wmnames,k]=eval([newfile ''(qwt_pos,0)'']);,' ...
	'qwt_pos = [];,' ...
	'for i=1:k,' ...
		'qwt_pos = [qwt_pos i];,' ...
	'end,' ...
	'axes(''position'',[0.05 0.25 0.3 0.2],''color'',[0.85 0.95 0.95],''xcolor'',' ...
	'[0.7 0.83 0.8],''ycolor'',[0.7 0.83 0.8],''xtick'',[],''ytick'',[]);,' ...
	'text(0.15,0.9,''Available water types'',''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz);,' ...
	'for i = 1:20:length(wmnames),' ...
		'j = i+20;,' ...
		'if j>length(wmnames) j=length(wmnames); end,' ...
		'text(0.05,0.77-0.008*i,wmnames(i:j),''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz);,' ...
	'end,' ...
	'set(status,''String'',status1);,' ...
	'set(selwt,''Visible'',''on'');,' ...
	'set(selwtxt,''Visible'',''on'');,' ...
	], ...
	'Position',[0.17 0.71 0.21 0.05], ...
	'String','qwt2', ...
	'Style','edit','fontsize',ftz);

selwtxt = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.03 0.15 0.2 0.05], ...
	'String','Select your water types', ...
	'Style','text','fontsize',ftz);
	
selwt = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.6 0.8 0.9], ...
	'Callback',[ ...
	'qwt_pos = str2num(get(selwt,''String''));,' ...
	'set(status,''String'',status2);,' ...
	'selax = axes(''position'',[0.05 0.25 0.3 0.2],''color'',[0.85 0.95 0.95],''xcolor'',' ...
	'[0.7 0.83 0.8],''ycolor'',[0.7 0.83 0.8],''xtick'',[],''ytick'',[]);,' ...
	'text(0.15,0.9,''Selected water types'',''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz);,' ...
	'wm_index = [];,' ...
	'wm_ind0  = [     ];,' ...
	'wm_ind1  = [     ];,' ...
	'j = 0;,' ...
	'tit_index = [];,' ...
	'for i = 1:length(qwt_pos),' ...
		'ii = 0;,' ...
		'wm_ind1 = wmnames(5*(qwt_pos(i)-1)+1:5*(qwt_pos(i)-1)+5);,' ...
		'text(0.05+0.1*ii,0.83-0.13*(i-ii),wmnames(5*(qwt_pos(i)-1)+1:5*(qwt_pos(i)-1)+5),''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz),' ...
		'k = strcmp(wm_ind0,wm_ind1);,' ...
		'if k == 0,' ...
			'j = j+1;,' ...
			'tit_index = [tit_index wmnames(5*(qwt_pos(i)-1)+1:5*(qwt_pos(i)-1)+5)];,' ...
		'end,' ...
		'wm_ind0 = wm_ind1;,' ...
		'wm_index = [wm_index j];,' ...
	'end,' ...
	'nr_of_wm = wm_index(length(wm_index));,' ...
	'i = 3;,' ...
	'clear G1;,' ...
	'[G0,wmnames,k]=eval([newfile ''(qwt_pos,0)'']);,' ...
	'G1(1,:) = G0(1,:);,' ...
	'G1(2,:) = G0(2,:);,' ...
	'if esx(6) == 1,' ...
		'G1(3,:) = G0(3,:);,' ...
		'i = i+1;,' ...
	'end,' ...
	'if esx(7) == 1,' ...
		'G1(i,:) = G0(4,:);,' ...
		'i = i+1;,' ...
	'end,' ...
	'if esx(8) == 1,' ...
		'G1(i,:) = G0(5,:);,' ...
		'i = i+1;,' ...
	'end,' ...
	'if esx(9) == 1,' ...
		'G1(i,:) = G0(6,:);,' ...
		'i = i+1;,' ...
	'end,' ...
	'if esx(10) == 1,' ...
		'G1(i,:) = abs(G0(8,:));,' ...
		'i = i+1;,' ...
	'end,' ...
	'G1(i,:) = G0(7,:);,' ...
	'set(selwtxt,''String'',''Change your water types''),' ...
	'set(donewt,''Visible'',''on'');,' ...
	'set(status,''String'',status1);,' ...
	], ...
	'Position',[0.24 0.16 0.16 0.05], ...
	'String','[1 2 3 4]', ...
	'Style','edit','fontsize',ftz);

% whichwght and inwght are the routines to read the weights. Only weights needed
% for the selected variables are selected.
whichwght = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Callback','omp2int', ...
	'Position',[0.01 0.65 0.15 0.05], ...
	'String','Weights:', ...
	'Style','text','fontsize',ftz);
	
inwght = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.6 0.8 0.9], ...
	'Callback',[ ...
	'newfile = get(inwght,''String'');,' ...
	'set(status,''String'',status2);,' ...
	'eval([''load '' newfile]),' ...
	'set(status,''String'',status1);,' ...
	'A = diag(Wx);,' ...
	'A1 = A(8);,' ...   % change order of weights so that mass conservation is last
	'A(8) = A(7);' ...
	'A(7) = A1;' ...
	'if esx(5) == 0 A(1) = 0;,' ...
	'ratio(1) = -999; end,' ...			% no pot. temperature weight if not needed
	'if esx(4) == 0 A(2) = 0;,' ...
	'ratio(2) = -999; end,' ...			% no salinity weight if not needed
	'if esx(6) == 0 A(3) = 0;,' ...
	'ratio(3) = -999; end,' ...			% no oxygen weight if no oxygen
	'if esx(7) == 0 A(4) = 0;,' ...
	'ratio(4) = -999;  end,' ...		% no phosphate weight if no phosphate
	'if esx(8) == 0 A(5) = 0;,' ...
	'ratio(5) = -999;  end,' ...		% no nitrate weight if no nitrate
	'if esx(9) == 0 A(6) = 0;,' ...
	'ratio(6) = -999;  end,' ...		% no silicate weight if no silicate
	'if esx(10) == 0 A(7) = 0;,' ...
	'ratio(7) = -999;  end,' ...		% no pot. vorticity weight if not needed
	'statind = find(A>0);,' ...
	'Wx = diag(A(statind));,' ...
        'clear A A1,' ...                    %%% remove A and A1 - conflict with OMP2.M!!!
	'statind = find(ratio>-999);,' ...
	'redfrat = ratio(statind);,' ... % Redfield ratio for selected variables only
	'set(whichhi,''Visible'',''on'');,' ...
	'set(inhi,''Visible'',''on'');,' ...
	'set(inwght,''Style'',''Text'',''HorizontalAlignment'',''Left'',''BackgroundColor'',[0.2 0.6 0.8]);,' ...
	], ...
	'Position',[0.17 0.66 0.21 0.05], ...
	'String','testwght', ...
	'Style','edit','fontsize',ftz);

%whichhi, inhi, whichlo and inlo display and select the data limits	

selec_str='Select data range: pot. density between 23 and 28 and oxygen greater 20 write:  pdens>=23&pdens<=28&oxy>=20';


whichhi = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Callback','omp2int', ...
	'Position',[0.02 0.4 0.34 0.25], ...
	'String',selec_str, ...
	'Style','text','fontsize',ftz);
	
inhi = uicontrol('Units','normalized', ...
	'BackgroundColor',[0.6 0.8 0.9], ...
	'Callback',[ ...
	'selection = get(inhi,''String'');,' ...
	'lim = 1;,' ...
	'if lim == 1,' ...
     'set(inhi,''Style'',''Text'',''HorizontalAlignment'',''Left'',''BackgroundColor'',[0.2 0.6 0.8]);,' ...
     'set(start,''Visible'',''on'');,' ...
	'end'], ...
	'Position',[0.05 0.46 0.34 0.05], ...
	'String','pdens>=23&pdens<=28&oxy>=20', ...
	'Style','edit','fontsize',ftz);
	
% The following radiobuttons display the possible selection of variables from
% the set of variables which exist in the data file. Their association is
% self-explanatory (see the String definitions).
% When the Done button is pressed buttons db(1) - db(10) change from Radiobuttons
% to Text, which prevents further selection changes.

db(1) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'ForegroundColor',[0.2 0.2 0.2], ...
	'Position',[0.6 0.7 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'set(db(1),''Value'',1),' ...
	'esx(1) = (get(db(1),''Value''));'], ...
	'Style','radiobutton', ...
	'String','latitude','fontsize',ftz);
	
db(2) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'ForegroundColor',[0.2 0.2 0.2], ...
	'Position',[0.6 0.65 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'set(db(2),''Value'',1),' ...
	'esx(2) = (get(db(2),''Value''));'], ...
	'Style','radiobutton', ...
	'String','longitude','fontsize',ftz);

db(3) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'ForegroundColor',[0.2 0.2 0.2], ...
	'Position',[0.6 0.6 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'set(db(3),''Value'',1),' ...
	'esx(3) = (get(db(3),''Value''));'], ...
	'Style','radiobutton', ...
	'String','pressure','fontsize',ftz);
	
db(4) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.55 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'set(db(4),''Value'',1),' ...
	'esx(4) = (get(db(4),''Value''));'], ...
	'Style','radiobutton', ...
	'String','salinity','fontsize',ftz);

db(5) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.5 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'if eex(5) == 0 set(db(5),''Value'',0); end,' ...
	'esx(5) = (get(db(5),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','potential temperature','fontsize',ftz);
	
db(6) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.45 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'if eex(6) == 0 set(db(6),''Value'',0); end,' ...
	'esx(6) = (get(db(6),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','oxygen','fontsize',ftz);
	
db(7) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.4 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'if eex(7) == 0 set(db(7),''Value'',0); end,' ...
	'esx(7) = (get(db(7),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','phosphate','fontsize',ftz);
	
db(8) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.35 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'if eex(8) == 0 set(db(8),''Value'',0); end,' ...
	'esx(8) = (get(db(8),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','nitrate','fontsize',ftz);
	
db(9) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.3 0.25 0.06], ...
	'Value',1, ...
	'Callback',[...
	'if eex(9) == 0 set(db(9),''Value'',0); end,' ...
	'esx(9) = (get(db(9),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','silicate','fontsize',ftz);
	
db(10) = uicontrol('Parent',mainfig, ...
	'Units','normalized', ...
	'BackgroundColor',[0.2 0.6 0.8], ...
	'Position',[0.6 0.25 0.25 0.06], ...
	'Value',0, ...
	'Callback',[...
	'esx(10) = (get(db(10),''Value''));,' ...
	], ...
	'Style','radiobutton', ...
	'String','potential vorticity','fontsize',ftz);

% Pressing the Done button indicates that the selection of variables is complete.
% This causes the program to calculate necessary additional variables if desired
% (potential vorticity, density, potential temperature) and freezes all db buttons
% by changing their Style to Text. It also freezes the selected data file by setting
% the Style of Infile to Text.

done = uicontrol('Parent',mainfig,'Units','normalized', ...
	'BackgroundColor',[0.5 0.5 0.5], ...
	'Callback',[...
	'axes(''position'',[0.455 0.17 0.6 0.71],''color'',[0.2 0.6 0.8],''xcolor'',' ...
	'[0.7 0.83 0.8],''ycolor'',[0.7 0.83 0.8],''xtick'',[],''ytick'',[]);,' ...
	'text(0.45,0.9,''  '',''color'',''k'',''fontname'',eval(ftm),''fontsize'',ftz);,' ...
	'pause(0.25);,' ...
	'set(status,''String'',status2);,' ...
	'set(db,''Style'',''Text'',''HorizontalAlignment'',''Left'');,' ...
	'set(infile,''Style'',''Text'',''HorizontalAlignment'',''Left'',''BackgroundColor'',[0.2 0.6 0.8]);,' ...
	'if eex(11) == 0 & eex(5) == 1,' ...
	'set(status,''String'',''Status: calculating temperature'');,' ...
	'temp = sw_temp(sal,ptemp,press,0);,' ...
	'eex(11) = 1;,' ...
	'end,' ...
	'set(status,''String'',status1);,' ...
	'if eex(5) == 0,' ...
		'set(status,''String'',''Status: calculating potential temperature'');,' ...
		'ptemp = sw_ptmp(sal,temp,press,0);,' ...
		'eex(5) = 1;,' ...
		'set(db(5),''Value'',1);,' ...
	'end,' ...
	'set(status,''String'',''Status: checking for potential density'');,' ...
	'if exist(''pdens'') == 0,' ...
		'pdens = sw_dens0(sal,ptemp) - 1000;,' ...
	'end,' ...
	'if eex(10) == 0 & esx(10) == 1,' ...
		'set(status,''String'',''Status: calculating potential vorticity'');,' ...
		'statind=[0 find(diff(press)<0)'' length(press)];,' ...
		'vvort =[];,' ...
		'pp = [];,' ...
		'[bfrq,vort,p_ave] = sw_bfrq(sal,temp,press,lat);,' ...
		'for i = 1:size(vort(:)),' ...
			'vvort = [vvort vort(i)];,' ...
			'pp    = [pp p_ave(i)];,' ...
		'end,' ...
		'vvort = 10E08*[vvort 0];,' ...
		'pp    = [pp 10000];,' ...
		'pvort = -999999*ones(size(press));,' ...
		'for i = 2:size(statind(:)),' ...
			'pvort(statind(i-1)+2:statind(i)-1) = interp1(pp(statind(i-1)+1:statind(i)-1),vvort(statind(i-1)+1:statind(i)-1),press(statind(i-1)+2:statind(i)-1));,' ...
		'end,' ...
		'clear bfrq vort vvort p_ave pp,' ...
		'pvort = abs(pvort);,' ...
		'eex(10) = 1;,' ...
	'end,' ...								% end potential vorticity calculation
	'set(status,''String'',status1);,' ...
	'set(whichwt,''Visible'',''on'');,' ...
	'set(inwt,''Visible'',''on'');,' ...
	'set(done,''Visible'',''off'');,' ...
	'for i=1:10,' ...
		'if esx(i) == 0 set(db(i),''Visible'',''off''); end,' ...
	'end,' ...
	], ...
	'Position',[0.85 0.775 0.066 0.06], ...
	'String','done', ...
	'Style','pushbutton','fontsize',ftz);

% Pressing the Donewt button indicates that the selection of water masses is
% complete. This freezes the selected water masses.

donewt = uicontrol('Parent',mainfig,'Units','normalized', ...
	'BackgroundColor',[0.5 0.5 0.5], ...
	'Callback',[...
	'set(db,''Style'',''Text'',''HorizontalAlignment'',''Left'');,' ...
	'set(infile,''Style'',''Text'',''HorizontalAlignment'',''Left'',''BackgroundColor'',[0.2 0.6 0.8]);,' ...
	'set(selwt,''Visible'',''off'');,' ...
	'set(selwtxt,''Visible'',''off'');,' ...
	'set(inwt,''Style'',''Text'',''HorizontalAlignment'',''Left'',''BackgroundColor'',[0.2 0.6 0.8]);,' ...
	'set(selax,''color'',[0.2 0.6 0.8]);,' ...
	'set(donewt,''Visible'',''off'');,' ...
	'set(whichwght,''Visible'',''on'');,' ...
	'set(inwght,''Visible'',''on'');,' ...
	'for i=1:10,' ...
		'if eex(i) == 0 set(db(i),''Visible'',''off''); end,' ...
	'end,' ...
	], ...
	'Position',[0.27 0.27 0.06 0.05], ...
	'String','done', ...
	'Style','pushbutton','fontsize',ftz);

% The start button is where the real action is: the call to omp2.m which does the science.
start= uicontrol('Parent',mainfig,'Units','normalized', ...
	'BackgroundColor',[0.8 0 0.1], ...
	'Callback',['close all,' ...
	'switchpot = ''n'';,' ...  %needed for compatibility with omp2.m
	'if esx(10) == 1 switchpot = ''y''; end,' ...
	'omp2,' ...
	], ...
	'Position',[0.46 0.05 0.116 0.066], ...
	'String','start', ...
	'Style','pushbutton','fontsize',ftz);

% A few statements to define the initial appearance of the window
set(db,'Visible','off');
set(selwt,'Visible','off');
set(selwtxt,'Visible','off');
set(whichwt,'Visible','off');
set(inwt,'Visible','off');
set(whichwght,'Visible','off');
set(inwght,'Visible','off');
set(whichhi,'Visible','off');
set(inhi,'Visible','off');
set(done,'Visible','off');
set(donewt,'Visible','off');
set(start,'Visible','off');
